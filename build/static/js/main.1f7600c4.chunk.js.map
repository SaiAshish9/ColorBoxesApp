{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NUM_BOXES","Box","_ref","style","width","height","display","backgroundColor","color","react_default","a","createElement","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","boxes","Array","fill","map","getRandomColor","assertThisInitialized","state","setInterval","slice","Math","floor","random","length","setState","colorIndex","allColors","index","App_Box","key","className","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAGMA,SAAY,IAEZC,EAAM,SAAAC,GAAa,IACjBC,EAAQ,CACZC,MAAO,QACPC,OAAQ,QACRC,QAAS,eACTC,gBALqBL,EAAXM,OAOZ,OAAOC,EAAAC,EAAAC,cAAA,OAAKR,MAAOA,KAGfS,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACN,IAAMQ,EAAQC,MAAMtB,GAAWuB,OAAOC,IAAIV,EAAKW,eAAjCV,OAAAW,EAAA,EAAAX,CAAAD,IAFG,OAGjBA,EAAKa,MAAQ,CAACN,SAEdO,YAAY,WACV,IAAMP,EAAQP,EAAKa,MAAMN,MAAMQ,QAE/BR,EADkBS,KAAKC,MAAMD,KAAKE,SAAWX,EAAMY,SAChCnB,EAAKW,iBACxBX,EAAKoB,SAAS,CAACb,WACd,KAVcP,gFAcjB,IAAIqB,EAAaL,KAAKC,MAAMD,KAAKE,SAAWf,KAAKJ,MAAMuB,UAAUH,QACjE,OAAOhB,KAAKJ,MAAMuB,UAAUD,oCAI5B,IAAMd,EAAQJ,KAAKU,MAAMN,MAAMG,IAAI,SAAChB,EAAO6B,GAAR,OACjC5B,EAAAC,EAAAC,cAAC2B,EAAD,CAAKC,IAAKF,EAAO7B,MAAOA,MAE1B,OACEC,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACZnB,UA1BSoB,aAgClB7B,EAAI8B,aAAe,CACjBN,UAAW,CAAC,YAAY,eAAe,OAAO,aAAa,QAAQ,QAAQ,SAAS,QAAQ,iBAChF,OAAO,aAAa,QAAQ,YAAY,YAAY,aAAa,YACjE,QAAQ,iBAAiB,WAAW,UAAU,OAAO,WAAW,WAAW,gBAC3E,WAAW,WAAW,YAAY,YAAY,cAAc,iBAAiB,aAC7E,aAAa,UAAU,aAAa,eAAe,gBAAgB,gBAAgB,gBACnF,gBAAgB,aAAa,WAAW,cAAc,UAAU,UAAU,aAC1E,YAAY,cAAc,cAAc,UAAU,YAAY,aAAa,OAAO,YAClF,OAAO,OAAO,QAAQ,cAAc,WAAW,UAAU,YAAY,SAAS,QAAQ,QACtF,WAAW,gBAAgB,YAAY,eAAe,YAAY,aAAa,YAC/E,uBAAuB,YAAY,YAAY,aAAa,YAAY,cACxE,gBAAgB,eAAe,iBAAiB,iBAAiB,iBAAiB,cAClF,OAAO,YAAY,QAAQ,UAAU,SAAS,mBAAmB,aAAa,eAC9E,eAAe,iBAAiB,kBAAkB,oBAAoB,kBACtE,kBAAkB,eAAe,YAAY,YAAY,WAAW,cAAc,OAClF,UAAU,QAAQ,YAAY,SAAS,YAAY,SAAS,gBAAgB,YAC5E,gBAAgB,gBAAgB,aAAa,YAAY,OAAO,OAAO,OAAO,aAC9E,SAAS,MAAM,YAAY,YAAY,cAAc,SAAS,aAAa,WAC3E,WAAW,SAAS,SAAS,UAAU,YAAY,YAAY,YAAY,OAAO,cAClF,YAAY,MAAM,OAAO,UAAU,SAAS,YAAY,SAAS,QAAQ,QAAQ,aACjF,SAAS,gBAGRxB,QC1DK+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1f7600c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nconst NUM_BOXES = 36;\r\n\r\nconst Box = ({color}) => {\r\n  const style = {\r\n    width: '180px',\r\n    height: '180px',\r\n    display: 'inline-block',\r\n    backgroundColor: color\r\n  }\r\n  return <div style={style} />;\r\n};\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    const boxes = Array(NUM_BOXES).fill().map(this.getRandomColor, this);\r\n    this.state = {boxes};\r\n\r\n    setInterval(() => {\r\n      const boxes = this.state.boxes.slice();\r\n      const randIndex = Math.floor(Math.random() * boxes.length);\r\n      boxes[randIndex] = this.getRandomColor();\r\n      this.setState({boxes});\r\n    }, 300);\r\n  }\r\n\r\n  getRandomColor() {\r\n    let colorIndex = Math.floor(Math.random() * this.props.allColors.length);\r\n    return this.props.allColors[colorIndex];\r\n  }\r\n\r\n  render() {\r\n    const boxes = this.state.boxes.map((color, index) => (\r\n      <Box key={index} color={color} />\r\n    ));\r\n    return (\r\n      <div className=\"App\">\r\n        {boxes}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.defaultProps = {\r\n  allColors: [\"AliceBlue\",\"AntiqueWhite\",\"Aqua\",\"Aquamarine\",\"Azure\",\"Beige\",\"Bisque\",\"Black\",\"BlanchedAlmond\",\r\n              \"Blue\",\"BlueViolet\",\"Brown\",\"BurlyWood\",\"CadetBlue\",\"Chartreuse\",\"Chocolate\",\r\n              \"Coral\",\"CornflowerBlue\",\"Cornsilk\",\"Crimson\",\"Cyan\",\"DarkBlue\",\"DarkCyan\",\"DarkGoldenRod\",\r\n              \"DarkGray\",\"DarkGrey\",\"DarkGreen\",\"DarkKhaki\",\"DarkMagenta\",\"DarkOliveGreen\",\"Darkorange\",\r\n              \"DarkOrchid\",\"DarkRed\",\"DarkSalmon\",\"DarkSeaGreen\",\"DarkSlateBlue\",\"DarkSlateGray\",\"DarkSlateGrey\",\r\n              \"DarkTurquoise\",\"DarkViolet\",\"DeepPink\",\"DeepSkyBlue\",\"DimGray\",\"DimGrey\",\"DodgerBlue\",\r\n              \"FireBrick\",\"FloralWhite\",\"ForestGreen\",\"Fuchsia\",\"Gainsboro\",\"GhostWhite\",\"Gold\",\"GoldenRod\",\r\n              \"Gray\",\"Grey\",\"Green\",\"GreenYellow\",\"HoneyDew\",\"HotPink\",\"IndianRed\",\"Indigo\",\"Ivory\",\"Khaki\",\r\n              \"Lavender\",\"LavenderBlush\",\"LawnGreen\",\"LemonChiffon\",\"LightBlue\",\"LightCoral\",\"LightCyan\",\r\n              \"LightGoldenRodYellow\",\"LightGray\",\"LightGrey\",\"LightGreen\",\"LightPink\",\"LightSalmon\",\r\n              \"LightSeaGreen\",\"LightSkyBlue\",\"LightSlateGray\",\"LightSlateGrey\",\"LightSteelBlue\",\"LightYellow\",\r\n              \"Lime\",\"LimeGreen\",\"Linen\",\"Magenta\",\"Maroon\",\"MediumAquaMarine\",\"MediumBlue\",\"MediumOrchid\",\r\n              \"MediumPurple\",\"MediumSeaGreen\",\"MediumSlateBlue\",\"MediumSpringGreen\",\"MediumTurquoise\",\r\n              \"MediumVioletRed\",\"MidnightBlue\",\"MintCream\",\"MistyRose\",\"Moccasin\",\"NavajoWhite\",\"Navy\",\r\n              \"OldLace\",\"Olive\",\"OliveDrab\",\"Orange\",\"OrangeRed\",\"Orchid\",\"PaleGoldenRod\",\"PaleGreen\",\r\n              \"PaleTurquoise\",\"PaleVioletRed\",\"PapayaWhip\",\"PeachPuff\",\"Peru\",\"Pink\",\"Plum\",\"PowderBlue\",\r\n              \"Purple\",\"Red\",\"RosyBrown\",\"RoyalBlue\",\"SaddleBrown\",\"Salmon\",\"SandyBrown\",\"SeaGreen\",\r\n              \"SeaShell\",\"Sienna\",\"Silver\",\"SkyBlue\",\"SlateBlue\",\"SlateGray\",\"SlateGrey\",\"Snow\",\"SpringGreen\",\r\n              \"SteelBlue\",\"Tan\",\"Teal\",\"Thistle\",\"Tomato\",\"Turquoise\",\"Violet\",\"Wheat\",\"White\",\"WhiteSmoke\",\r\n              \"Yellow\",\"YellowGreen\"]\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}